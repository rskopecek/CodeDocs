<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<#
	string[] classProtections = { "public", "internal" };
	string[] staticMemberProtections = { "public", "private", "internal" };
	string[] memberProtections = { "public", "private", "protected", "internal", "protected internal" };
	string[] styles = {"static", ""};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace CodeDocs.Tests.Detection
{
	// Automated Tests
	public class StructDetectionAutomatedTests
	{
		public void AssertDetect(Type type, int amount)
		{
            var results = type.Detect();

			results.AssertExpectations(amount);
		}

<#	foreach(var protection in classProtections) { #>
<#		string className = protection.Replace(" ","") + "InstanceDetectionExampleStruct"; #>
		[Fact]
		public void Detection_Of_<#=className#>() { typeof(<#=className#>).Detect().AssertExpectations(<#=className#>.DetectionCount); }

<# } #>

	}




	// Instance Classes

<#	foreach(var protection in classProtections) { #>
<#		
		int counter = 0;
		string className = protection.Replace(" ","") + "InstanceDetectionExampleStruct";
		int parameterCount = 0;
#>
    [Bug("<#=(++counter).ToString()#>")]
    <#=protection#> class <#=className#>
    {
<#		foreach(var memberStyle in styles) { #>
		
		#region ***** Style = <#=memberStyle == "static" ? "Static" : "Instance" #>


<# foreach(var memberProtection in memberProtections) { #>
		
		#region Protection = <#=memberProtection#>

<#if (memberStyle!="static") { #>
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> <#=memberStyle#> <#=className#>(<#=GenerateParameters(++parameterCount)#>) {}
<# } #>
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> interface I<#=counter.ToString()#> { };
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> struct lc<#=counter.ToString()#> { };
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> class lc<#=counter.ToString()#> { };
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> static class lc<#=counter.ToString()#> { };
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> enum E<#=counter.ToString()#> { A };
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> <#=memberStyle#> string P<#=counter.ToString()#> { get; set; }
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> <#=memberStyle#> string F<#=counter.ToString()#>;
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> delegate string D<#=counter.ToString()#>();
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> <#=memberStyle#> event D<#=(counter-1).ToString()#> Ev<#=counter.ToString()#>;
        [Bug("<#=(++counter).ToString()#>")] <#=memberProtection#> <#=memberStyle#> void M<#=counter.ToString()#>() { }
		#endregion

<# } #>
		#endregion
<#		} #>

		public readonly static int DetectionCount = <#=counter#>;

    }
<#	} #>

}
<#+
	public string GenerateParameters(int count)
	{
		var sb = new List<string>();

		for(int x=1; x<=count; x++)
			sb.Add("int p" + x);

		return string.Join(", ", sb);
	}
#>