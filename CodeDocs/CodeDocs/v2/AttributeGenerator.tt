<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)\CodeDocs.Definitions\bin\$(ConfigurationName)\CodeDocs.Definitions.dll" #>
<#@ import namespace="CodeDocs.Definitions.v2" #>
<#@ output extension=".cs" #>
<#	
	var items = Glossary.Definitions();

	// Xml Documentation
	var mergeString = Environment.NewLine;
	var xmlSummary = @"/// <summary></summary>";
	var xmlDate = @"        /// <param name=""yyyymmdd"">The date in 4 digit year, 2 digit month, 2 digit day in integer format (due to .net attribute limitations).</param>";
	var xmlDetails = @"        /// <param name=""details"">The message to convey. Try to keep it short and to the point.</param>";
	var xmlRisk = @"        /// <param name=""risk"">The level of risk identified for the context.</param>";
	var xmlEffort = @"        /// <param name=""effort"">The assumed estimate of effort required.</param>";
	var xmlTagsAndReferences = @"        /// <param name=""tagsAndReferences"">Tags and Uri references.</param>";
#>
/*
 *
 *	System Generated via T4
 *
*/
using System;
using CodeDocs.Definitions.v2;

namespace CodeDocs.v2
{
<# foreach(var item in items) { #>

    /// <summary>
    /// <#=item.Description#> (Defaults: Risk.<#=item.DefaultRisk#>, Effort.<#=item.DefaultEffort#>)
    /// </summary>
	[AttributeUsage(Constants.AttributeScope, AllowMultiple = true, Inherited = false)]
    public class <#=item.Name#>Attribute : CodeDocsAttribute, <#=string.Join(", ", item.InterfaceNames())#>
    {

		public override Definition Definition { get { return Glossary.<#=item.Name#>; }}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, params string[] tagsAndReferences) : base(details, null, null, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, Risk risk, params string[] tagsAndReferences) : base(details, risk, null, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlEffort, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, Effort effort, params string[] tagsAndReferences) : base(details, null, effort, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlDate, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, int yyyymmdd, params string[] tagsAndReferences) : base(details, null, null, yyyymmdd, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlEffort, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, Risk risk, Effort effort, params string[] tagsAndReferences) : base(details, risk, effort, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlDate, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, Risk risk, int yyyymmdd, params string[] tagsAndReferences) : base(details, risk, null, yyyymmdd, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlEffort, xmlDate, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, Effort effort, int yyyymmdd, params string[] tagsAndReferences) : base(details, null, effort, yyyymmdd, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlEffort, xmlDate, xmlTagsAndReferences)#>
		public <#=item.Name#>Attribute(string details, Risk risk, Effort effort, int yyyymmdd, params string[] tagsAndReferences) : base(details, risk, effort, yyyymmdd, tagsAndReferences){}

	}
<# } #>
}