<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)\packages\Newtonsoft.Json.6.0.6\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#
	var definitionFilePath = @"[Code_Docs_Root_Directory]\glossary.json";
	var jsonGlossary = File.ReadAllText(definitionFilePath);
	var glossary = JsonConvert.DeserializeObject<Glossary>(jsonGlossary);
#>
<#+
    public class Glossary
    {
        public Glossary()
        {
            Scope = new List<string>();
			Risks = new List<NameValue>();
            Efforts = new List<NameValue>();
            Groups = new List<Group>();
        }
		
		[JsonProperty("scope", Required=Required.Always)]
		public List<string> Scope { get; set; }

        [JsonProperty("risks", Required=Required.Always)]
        public List<NameValue> Risks { get; set; }

        [JsonProperty("efforts", Required = Required.Always)]
        public List<NameValue> Efforts { get; set; }

        [JsonProperty("groups", Required = Required.Always)]
        public List<Group> Groups { get; set; } 

    }
    public class NameValue
    {

        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.Always)]
        public int Value { get; set; }

    }
    public class Group
    {
        public Group()
        {
            Definitions = new List<Definition>();
        }

        [JsonProperty("name", Required= Required.Always)]
        public string Name { get; set; }

        [JsonProperty("definitions", Required = Required.Always)]
        public List<Definition> Definitions { get; set; }
    }
    public class Definition
    {
        [JsonIgnore]
        public string Id { get{ return Name.Replace(" ","").Replace("'",""); } }

        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("description", Required = Required.Always)]
        public string Description { get; set; }

        [JsonProperty("risk", Required = Required.Always)]
        public string Risk { get; set; }

        [JsonProperty("effort", Required = Required.Always)]
        public string Effort { get; set; }

        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

        [JsonProperty("one_per_context")]
        public bool OnePerContext { get; set; }

        public IEnumerable<string> InterfaceNames()
        {
			var iNames = new List<string>();

			iNames.AddRange(Tags.Select(tag => "I" + tag + "Tag"));
			iNames.Add("I" + Risk + "RiskTag");
			iNames.Add("I" + Effort + "EffortTag");

			if(OnePerContext)
				iNames.Add("IOnePerContextTag");

            return iNames;
        }
    }

#>