//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeDocs.Generator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class CodeDocAttributeTemplate : CodeDocAttributeTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
            this.Write(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeDocs.Generator.
//     CodeDocs.Generator bases all generation on glossary.json.
//  
//     Please don't alter this file as it is only the output of a T4 template.
// </auto-generated>
// ------------------------------------------------------------------------------


using System;
namespace CodeDocs
{

    /// <summary>");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Definition.Description));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("</summary>\n    public sealed class ");
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Definition.Name));
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write("Attribute : CodeDocsAttribute\n    {\n        /// <summary>\n        /// ");
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Definition.Description));
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(@"
        /// </summary>
        /// <param name=""comment"">Comment to provide to the developer.</param>
        /// <param name=""asOf"">Date of when the item was identified, as yyyyMMdd.</param>
        /// <param name=""risk"">General level of risk.</param>
        /// <param name=""riskAmount"">Specific amount of risk. Default, long.min, is null/notset.</param>
        /// <param name=""effort"">General level of effort.</param>
        /// <param name=""effortAmount"">Specific amount of effort. Default, long.min, is null/notset.</param>
        /// <param name=""profit"">General level of profit effect.</param>
        /// <param name=""profitAmount"">Specific amount of profit effect. Default, long.min, is null/notset.</param>
        /// <param name=""see"">Used to point reference to a document or url that the dev can learn from.</param>
        /// <param name=""tags"">Comma separate list of tags.  Tags will be trimmed and case lowered.</param>
        /// <param name=""id"">Id for any specific use.</param>
        public ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Definition.Name));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(@"Attribute(

        string comment = """",
        
        int asOf = int.MinValue,

        Level risk = Level.NotSet, long riskAmount = long.MinValue,

        Level effort = Level.NotSet, long effortAmount = long.MinValue,
        
        Level profit = Level.NotSet, long profitAmount = long.MinValue,
        
        string see = """",
        
        string tags = """",
        string id = """",
        
        // Patterns & Principles
        Solid solid = Solid.NotSet,
        Grasp grasp = Grasp.NotSet,
        Creational creational = Creational.NotSet,
        Structural structural = Structural.NotSet,
        Behavioral behavioral = Behavioral.NotSet,
        Concurrency concurrency = Concurrency.NotSet,
        Functional functional = Functional.NotSet,
        Architectural architectural = Architectural.NotSet,
        CloudDistributed cloudDistributed = CloudDistributed.NotSet,
        General general = General.NotSet

        ) : base(comment, asOf, risk, riskAmount, effort, effortAmount, profit, profitAmount, see, tags, id,
            solid, grasp, creational, structural, behavioral, concurrency, functional, architectural, cloudDistributed, general
        )
        { }
    }

}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeDocAttributeTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
