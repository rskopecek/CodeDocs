{
"scope" : [ 
    "Assembly",
    "Class", "Struct", "Interface", "Enum",
    "Field", "Property",
    "Delegate", "Event",
    "Constructor", "Method"
],
"risks" : [
    { "name" : "None", "value" : 0},
    { "name" : "Low", "value" : 3},
    { "name" : "Moderate", "value" : 21},
    { "name" : "High", "value" : 55},
    { "name" : "Extreme", "value": 89 },
    { "name" : "Unknown", "value" : 144}
],
"efforts" : [
    { "name" : "None", "value" : 0},
    { "name" : "VerySmall", "value" : 1},
    { "name" : "Small", "value" : 8},
    { "name" : "Medium", "value" : 34},
    { "name" : "Large", "value" : 55},
    { "name" : "VeryLarge", "value" : 89},
    { "name" : "Unknown", "value" : 144}
],
"definitions" :
[
    {
        "id":  "Bug",
        "name": "Bug",
        "description": "Used to acknowledge and identify code that has a live issue even though a resolution has not been identified or implemented.",
        "tags": [ "Functional", "Degredation" ]
    },
    {
        "id" : "MajorFix",
        "name": "Major Fix",
        "description": "Identification of a major fix that is important to communicate and potentially worthy of moving the [incr] version # forward if any exist during deployment (major.minor.incr).",
        "tags": [ "Functional", "Change", "Major", "Fix" ]
    },
    {
        "id" : "MinorFix",
        "name": "Minor Fix",
        "description": "Identification of a minor fix that is important to communicate and potentially worthy of moving the [incr] version # forward if any exist during deployment (major.minor.incr).",
        "tags": [ "Functional", "Change", "Minor", "Fix" ]
    },
    {
        "id" : "Slow",
        "name": "Slow",
        "description": "A piece of code that is slower than desired and need refactored.",
        "tags": [ "Performance", "Degredation" ],
        "one_per_context": true
    },
    {
        "id" :  "Todo",
        "name": "Todo",
        "description": "Uncompleted feature.",
        "tags": [ "Functional", "Work", "Degredation" ]
    },
    {
        "id" : "Consequence",
        "name": "Consequence",
        "description": "A side-effect that may occur either by the behavior of the code or if a change is made to the code.",
        "tags": [ "Safety", "Consequence" ]
    },
    {
        "id" : "DeadCode",
        "name": "Dead Code",
        "description": "Typically code that is commented out or code that exists but is never used.",
        "tags": [ "Safety", "DeadCode", "Consequence" ],
        "one_per_context": true
    },
    {
        "id": "Security",
        "name": "Security",
        "description": "A note about security in relation to the context, not necessarily a risk.",
        "tags": [ "Safety", "Security" ]
    },
    {
        "id" : "Insecure",
        "name": "Insecure",
        "description": "An identified security issue.",
        "tags": [ "Safety", "Security", "InSecure", "Degredation" ]
    },
    {
        "id" : "Test",
        "name": "Test",
        "description": "Test scenario that appears to be missing",
        "tags": [ "Safety", "Degredation" ]
    },
    {
        "id" : "Toxic",
        "name": "Toxic",
        "description": "A piece of code that is extremely tempermental, developers should be cautioned, and refactoring is required.",
        "tags": [ "Safety", "Toxic", "Degredation" ],
        "one_per_context": true
    },
    {
        "id": "Cite",
        "name": "Cite",
        "description": "Used to identify external resources (like StackOverflow, blogs, etc) that would add value to the context this attribute is applied to.",
        "risk": "None",
        "effort": "None",
        "tags": [ "Belonging", "Meaning" ]
    },
    {
        "id": "Feature",
        "name": "Feature",
        "description": "A distinctive function/attribute about what the application does.",
        "tags": [ "Belonging", "Feature" ]
    },
    {
        "id": "Location",
        "name": "Location",
        "description": "Piece of code that appears to be in the wrong place.",
        "tags": [ "Belonging", "Meaning" ],
        "one_per_context": true
    },
    {
        "id" :  "MajorChange",
        "name": "Major Change",
        "description": "Identification of a major change that is important to communicate and potentially worthy of moving the version # forward if any exist during deployment (major.minor.incr).",
        "tags": [ "Belonging", "Change", "Major" ]
    },
    {
        "id": "MinorChange",
        "name": "Minor Change",
        "description": "Identification of a minor change that is important to communicate and potentially worthy of moving the version # forward if any exist during deployment (major.minor.incr).",
        "tags": [ "Belonging", "Change", "Minor" ]
    },
    {
        "id" : "Naming",
        "name": "Naming",
        "description": "Intent is clear.  However, naming could be cleaner.",
        "tags": [ "Belonging", "Meaning" ],
        "one_per_context": true
    },
    {
        "id" : "Readability",
        "name": "Readability",
        "description": "Hard to read at first glance for one or more people.",
        "tags": [ "Belonging", "Meaning" ],
        "one_per_context": true
    },
    {
        "id" : "Reviewed",
        "name": "Reviewed",
        "description": "Used to tag that an area of code has been reviewed by one or more people.",
        "tags": [ "Belonging", "Review" ]
    },
    {
        "id" : "Standards",
        "name": "Standards",
        "description": "A piece of code that needs refactored to adhere to code/design standards.",
        "tags": [ "Belonging", "Standards" ],
        "one_per_context": true
    },
    {
        "id" : "Clarification",
        "name": "Clarification",
        "description": "Readable, but missing a 'good to know' for people trying to understand.",
        "tags": [ "Confidence", "Meaning" ]
    },
    {
        "id" : "Future",
        "name": "Future",
        "description": "A potential future scenario, in which this will need to be changed or these are some insights about the change.",
        "tags": [ "Confidence", "Work", "Future", "YAGNI" ]
    },
    {
        "id" :  "Hack",
        "name": "Hack",
        "description": "Working feature.  Requires refactoring due to shortcuts needed to make it work.",
        "tags": [ "Confidence", "Degredation" ]
    },
    {
        "id" : "Purpose",
        "name": "Purpose",
        "description": "Unsure of actual intent.  Might be doing too many things.",
        "tags": [ "Confidence", "Meaning", "SRP" ],
        "one_per_context": true
    },
    {
        "id" : "Refactor",
        "name": "Refactor",
        "description": "Working feature that needs improvement",
        "tags": [ "Confidence", "Degredation" ],
        "one_per_context": true
    },
    {
        "id": "DependancyInversion",
        "name": "Dependancy Inversion",
        "description": "[The D in SOLID] Depend upon Abstractions. Do not depend upon concretions.",
        "tags": [ "Principles", "SOLID", "DIP" ]
    },
    {
        "id": "DontRepeatYourself",
        "name": "Don't Repeat Yourself",
        "description": "(DRY) Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.",
        "tags": [ "Principles", "SOLID", "DRY" ]
    },
    {
        "id": "InterfaceSegregation",
        "name": "Interface Segregation",
        "description": "[The I in SOLID] Many client-specific interfaces are better than one general-purpose interface.",
        "tags": [ "Principles", "SOLID", "ISP" ]
    },
    {
        "id": "LeastKnowledge",
        "name": "Least Knowledge",
        "description": "[Law of Demeter] A component or object shold not know about internal details of other components or objects.",
        "tags": [ "Principles", "LoD" ]
    },
    {
        "id": "LiskovSubstitution",
        "name": "Liskov Substitution",
        "description": "[The L in SOLID] Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.",
        "tags": [ "Principles", "SOLID", "LSP" ]
    },
    {
        "id": "OccamsRazor",
        "name": "Occams Razor",
        "description": "The path with the fewest assumptions should be selected even if other directions may eventually prove correct.",
        "tags": [ "Principles" ]
    },
    {
        "id": "OpenClosed",
        "name": "Open Closed",
        "description": "[The O in SOLID] Software entities should be open for extension, but closed for modification.",
        "tags": [ "Principles", "SOLID", "OCP" ]
    },
    {
        "id": "SeparationOfConcerns",
        "name": "Separation Of Concerns",
        "description": "The design should divide areas of concern into their own distinct sections.",
        "tags": [ "Principles", "SoC" ]
    },
    {
        "id": "SingleResponsibility",
        "name": "Single Responsibility",
        "description": "[The S in SOLID] Each context of code should do one thing and thus have only one reason to change.",
        "tags": [ "Principles", "SOLID", "SRP" ]
    },
    {
        "id": "YouArentGonnaNeedIt",
        "name": "You Aren't Gonna Need It",
        "description": "Always implement things when you actually need them, never when you just foresee that you need them.",
        "tags": [ "Principles", "YAGNI" ]
    }
]
}