<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeDocs.Generator.
//     CodeDocs.Generator bases all generation on glossary.json.
//  
//     Please don't alter this file as it is only the output of a T4 template.
// </auto-generated>
// ------------------------------------------------------------------------------
<#	
	var nextLineWithComma = "," + Environment.NewLine + "		";
	var definitions = Glossary.Definitions;
	var tags = definitions.SelectMany(i=> i.Tags).Distinct();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CodeDocs
{

	/// <summary>
	/// An expression of risk relative to the context it's being applied to
	/// </summary>
	public enum Risk
	{
		<#=string.Join(nextLineWithComma, Glossary.Risks.Select(i=> i.Name + " = " + i.Value))#>
	}

	/// <summary>
	/// An expression of effort required to address the subject as it relates to the context it's being applied to
	/// </summary>
	public enum Effort
	{
		<#=string.Join(nextLineWithComma, Glossary.Efforts.Select(i=> i.Name + " = " + i.Value))#>
	}

	/// <summary>
	/// Generic tags as defined with the definitions to provide cross-cutting searching capabilities
	/// </summary>
	public enum Tag
	{
		<#=string.Join(nextLineWithComma, tags)#>
	}

	public static partial class Constants
	{

		/// <summary>
		/// Default scope applied to all CodeDoc attributes
		/// </summary>
		public const AttributeTargets Scope = <#= string.Join(" | ", Glossary.Scope.Select(i=> "AttributeTargets." + i))#>;
	
		#region Enum.ToName()

		/// <summary>
		/// Provides the string based name of the risk enum value provided
		/// </summary>
		public static string ToName(this Risk risk)
		{
			switch(risk)
			{
<#foreach(var risk in Glossary.Risks) { #>
				case Risk.<#=risk.Name#>: return "<#=risk.Name#>";
<# } #>
				default: return string.Empty;
			}
		}

		/// <summary>
		/// Provides the string based name of the effort enum value provided
		/// </summary>
		public static string ToName(this Effort effort)
		{
			switch(effort)
			{
<#foreach(var effort in Glossary.Efforts) { #>
				case Effort.<#=effort.Name#>: return "<#=effort.Name#>";
<# } #>
				default: return string.Empty;
			}
		}

		/// <summary>
		/// Provides the string based name of the tag enum value provide
		/// </summary>
		public static string ToName(this Tag tag)
		{
			switch(tag)
			{
<#foreach(var tag in tags) { #>
				case Tag.<#=tag#>: return "<#=tag#>";
<# } #>
				default: return string.Empty;
			}
		}
	
		#endregion
	}
}