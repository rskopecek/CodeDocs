<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#	
	// Xml Documentation
	var mergeString = Environment.NewLine;
	var xmlSummary = @"/// <summary></summary>";
	var xmlDate = @"        /// <param name=""yyyymmdd"">The date in 4 digit year, 2 digit month, 2 digit day in integer format (due to .net attribute limitations).</param>";
	var xmlDetails = @"        /// <param name=""details"">The message to convey. Try to keep it short and to the point.</param>";
	var xmlRisk = @"        /// <param name=""risk"">The level of risk identified for the context.</param>";
	var xmlEffort = @"        /// <param name=""effort"">The assumed estimate of effort required.</param>";
	var xmlTagsAndReferences = @"        /// <param name=""tagsAndReferences"">Tags and Uri references.</param>";
#>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeDocs.Generator.
//     CodeDocs.Generator bases all generation on glossary.json.
//  
//     Please don't alter this file as it is only the output of a T4 template.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;

namespace CodeDocs
{

    /// <summary>
    /// <#=Definition.Description#> 
    /// </summary>
	[AttributeUsage(Constants.Scope, AllowMultiple = <#=(!Definition.OnePerContext).ToString().ToLower()#>, Inherited = false)]
    public sealed class <#=Definition.Id#>Attribute : CodeDocsAttribute, <#=string.Join(", ", Definition.InterfaceNames())#>
    {

		/// <summary>
		/// Access to the definition used to generate this attribute (provided by the CodeDocs.Glossary static object)
		/// </summary>
		public override IDefinition Definition { get { return Glossary.<#=Definition.Id#>; }}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, params string[] tagsAndReferences) : base(details, null, null, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, Risk risk, params string[] tagsAndReferences) : base(details, risk, null, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlEffort, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, Effort effort, params string[] tagsAndReferences) : base(details, null, effort, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlDate, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, int yyyymmdd, params string[] tagsAndReferences) : base(details, null, null, yyyymmdd, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlEffort, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, Risk risk, Effort effort, params string[] tagsAndReferences) : base(details, risk, effort, null, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlDate, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, Risk risk, int yyyymmdd, params string[] tagsAndReferences) : base(details, risk, null, yyyymmdd, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlEffort, xmlDate, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, Effort effort, int yyyymmdd, params string[] tagsAndReferences) : base(details, null, effort, yyyymmdd, tagsAndReferences){}

		<#=string.Join(mergeString, xmlSummary, xmlDetails, xmlRisk, xmlEffort, xmlDate, xmlTagsAndReferences)#>
		public <#=Definition.Id#>Attribute(string details, Risk risk, Effort effort, int yyyymmdd, params string[] tagsAndReferences) : base(details, risk, effort, yyyymmdd, tagsAndReferences){}

	}

}