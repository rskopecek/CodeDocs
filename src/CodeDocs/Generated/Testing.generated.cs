// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeDocs.Generator.
//     CodeDocs.Generator bases all generation on glossary.json.
//  
//     Please don't alter this file as it is only the output of a T4 template.
// </auto-generated>
// ------------------------------------------------------------------------------


using System;
namespace CodeDocs
{

    /// <summary>A use case or scenario that doesn't appear to have adequate automated testing</summary>
    public sealed class TestingAttribute : CodeDocsAttribute
    {
        /// <summary>
        /// A use case or scenario that doesn't appear to have adequate automated testing
        /// </summary>
        /// <param name="comment">Comment to provide to the developer.</param>
        /// <param name="asOf">Date of when the item was identified, as yyyyMMdd.</param>
        /// <param name="risk">General level of risk.</param>
        /// <param name="riskAmount">Specific amount of risk. Default, long.min, is null/notset.</param>
        /// <param name="effort">General level of effort.</param>
        /// <param name="effortAmount">Specific amount of effort. Default, long.min, is null/notset.</param>
        /// <param name="profit">General level of profit effect.</param>
        /// <param name="profitAmount">Specific amount of profit effect. Default, long.min, is null/notset.</param>
        /// <param name="see">Used to point reference to a document or url that the dev can learn from.</param>
        /// <param name="tags">Comma separate list of tags.  Tags will be trimmed and case lowered.</param>
        /// <param name="id">Id for any specific use.</param>
        public TestingAttribute(

        string comment = "",
        
        int asOf = int.MinValue,

        Level risk = Level.NotSet, long riskAmount = long.MinValue,

        Level effort = Level.NotSet, long effortAmount = long.MinValue,
        
        Level profit = Level.NotSet, long profitAmount = long.MinValue,
        
        string see = "",
        
        string tags = "",
        string id = "",
        
        // Patterns & Principles
        Solid solid = Solid.NotSet,
        Grasp grasp = Grasp.NotSet,
        Creational creational = Creational.NotSet,
        Structural structural = Structural.NotSet,
        Behavioral behavioral = Behavioral.NotSet,
        Concurrency concurrency = Concurrency.NotSet,
        Functional functional = Functional.NotSet,
        Architectural architectural = Architectural.NotSet,
        CloudDistributed cloudDistributed = CloudDistributed.NotSet,
        General general = General.NotSet

        ) : base(comment, asOf, risk, riskAmount, effort, effortAmount, profit, profitAmount, see, tags, id,
            solid, grasp, creational, structural, behavioral, concurrency, functional, architectural, cloudDistributed, general
        )
        { }
    }

}